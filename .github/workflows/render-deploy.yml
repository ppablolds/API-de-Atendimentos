name: Build and Deploy to Render

on:
  push:
    branches:
      - main # ou sua branch principal

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
          cache-dependency-path: '**/pom.xml'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  deploy:
    name: Deploy to Render
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar

      - name: Deploy to Render
        uses: actions/github-script@v7
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        with:
          script: |
            const apiKey = process.env.RENDER_API_KEY;
            const serviceId = process.env.RENDER_SERVICE_ID;
            const deployUrl = `https://api.render.com/v1/services/${serviceId}/deploy`;

            if (!apiKey || !serviceId) {
              console.error("RENDER_API_KEY and RENDER_SERVICE_ID secrets must be defined.");
              process.exit(1);
            }

            try {
              const response = await github.request(`POST ${deployUrl}`, {
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${apiKey}`,
                },
              });

              if (response.status >= 200 && response.status < 300) {
                const data = response.data;
                if (data && data.deploy && data.deploy.id) {
                  console.log(`Deploy initiated successfully. Deploy ID: ${data.deploy.id}`);
                } else {
                  console.log('Deploy initiated successfully.');
                }
              } else {
                console.error(`Failed to trigger deploy: ${response.status} - ${JSON.stringify(response.data)}`);
                process.exit(1);
              }
            } catch (error) {
              console.error(`Error during deploy request: ${error.message}`);
              process.exit(1);
            }