stages:
  - build
  - test
  - package
  - deploy

variables:
  MAVEN_CLI_OPTS: "-Dmaven.repo.local=.m2"
  MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener.level=warn"

cache:
  paths:
    - .m2/repository
    - target/

build:
  stage: build
  image: maven:4.0.0-jdk-21 # Usando Maven 4.0.0 com JDK 21
  script:
    - echo "Iniciando a construção do projeto Spring Boot com Maven 4 e JDK 21..."
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS clean package -DskipTests
  artifacts:
    paths:
      - target/*.jar

test:
  stage: test
  image: maven:4.0.0-jdk-21 # Usando a mesma imagem para consistência
  script:
    - echo "Executando os testes unitários e de integração..."
    - mvn $MAVEN_CLI_OPTS $MAVEN_OPTS test
  needs:
    - build

package:
  stage: package
  image: docker:24.0 # Usando Docker 24.0
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Construindo a imagem Docker com Docker 24.0..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  needs:
    - test
  only:
    - master # Usando a branch 'master' conforme especificado

deploy:
  stage: deploy
  image: ruby:latest # Uma imagem com Ruby para instalar o render-cli
  variables:
    RENDER_API_KEY: "$RENDER_API_KEY" # Configure esta variável no GitLab CI/CD settings
    RENDER_SERVICE_ID: "$RENDER_SERVICE_ID" # Configure esta variável no GitLab CI/CD settings
  before_script:
    - apt-get update -yq
    - gem install render_cli
  script:
    - echo "Fazendo deploy para o Render..."
    - render deploy $RENDER_SERVICE_ID
  needs:
    - package
  environment:
    name: production # Ou o nome do seu ambiente no Render
    url: # Insira a URL do seu serviço Render aqui (opcional)
  only:
    - master # Deploy apenas na branch 'master'
